Problem Introduction Majority rule is a decision rule that selects the alternative which has a majority, that is, more than half the votes. 
Given a sequence of elements a1,a2,...,an, you would like to check whether it contains an element that appears more than n/2 times. 
A naive way to do this is the following. MajorityElement(a1,a2,...,an): 
for i from 1 to n: currentElement? ai 
count? 0 for j from 1 to n: 
if aj = currentElement: count?count+ 1 
if count > n/2: return ai return “no majority element”

The running time of this algorithm is quadratic. Your goal is to use the divide-and-conquer technique to design an O(nlogn) algorithm.

Problem Description Task. 
The goal in this code problem is to check whether an input sequence contains a majority element. 
Input Format. 
The first line contains an integer n, the next one contains a sequence of n non-negative integers a0,a1,...,an-1. 
Constraints. 1 = n = 105; 0 = ai = 109 for all 0 = i < n. 
Output Format. Output 1 if the sequence contains an element that appears strictly more than n/2 times, and 0 otherwise.
Sample 1. Input: 5 2 3 9 2 2 Output: 1 2 is the majority element.
Sample 2. Input: 4 1 2 3 4 Output: 0 There is no majority element in this sequence.
